#!/usr/bin/env ruby
# coding: utf-8
# For Testing 
# ruby -Ilib ./bin/decoupled_manager
# 
# Load all files in the directory decoupled is started from
$LOAD_PATH << Dir.pwd

require 'optparse'
require 'amqp'
require 'redis'
require 'decoupled/scheduler'
require 'decoupled/manager'

options = {}

optparse = OptionParser.new do |opts|
  
  options[:queue_name] = 'schedule'
  opts.on('-q', '--queue_name QUEUE_NAME', "name of the schedule queue (default => #{options[:queue_name]})") do |queue_name|            
    options[:queue_name] = queue_name
  end
  
  options[:amqp_host] = '127.0.0.1'
  opts.on('-a', '--amqp_host AMQP_HOST', "AMQP needs a Host to connect to (default => #{options[:amqp_host]})") do |amqp_host|           
    options[:amqp_host] = amqp_host
  end
  
  options[:environment] = 'development'
  opts.on('-q', '--environment DECOUPLED', "environment for different connections (default => #{options[:environment]})") do |environment|            
    options[:environment] = environment
  end

  opts.on('-h', '--help', 'Help messages') do     
    puts opts
    exit    
  end       
end

begin       
  optparse.parse!                 
rescue OptionParser::InvalidOption, OptionParser::MissingArgument  
  puts $!.to_s         
  puts optparse        
  exit
end

ENV['DECOUPLED'] = options[:environment]
# All option parsed successfully
# Show process Starting information
$0 = "Starting decoupled:manager"
$stdout.sync = true
    
AMQP.start(:host => options[:amqp_host]) do |connection, open_ok|
  manager_name = "#{`hostname`.chomp}-#{Process.pid}"
  
  channel   = AMQP::Channel.new(connection)
  scheduler = Decoupled::Scheduler.new(channel, options[:queue_name])
  scheduler.start
  
  manager = Decoupled::Manager.new(channel)
  manager.start

  $0 = "decoupled:manager => accepts schedule messages"
  puts "Decoupled Manager started at #{Time.now.strftime('%d.%m.%Y %H:%M:%S')}"
  
  # Stop the worker
  trap('TERM') { puts "\n stopping manager"; connection.close { EventMachine.stop } }
  trap('INT')  { puts "\n stopping manager"; connection.close { EventMachine.stop } }
end
