#!/usr/bin/env ruby
# coding: utf-8
#require 'rubygems'

# Load all files in the directory decoupled is started from
$LOAD_PATH[0,0] = File.join(File.dirname(__FILE__), '..', 'lib')
$LOAD_PATH << Dir.pwd
#$LOAD_PATH << '.'

require 'rubygems'
require 'optparse'
require 'redis'
require 'decoupled'
require 'yaml'

options = {}

optparse = OptionParser.new do |opts|

  options[:concurrent_count] = 1
  opts.on('-c', '--job-count JOB_COUNT', Integer, "Number of message the consumer will process in parallel (default => #{options[:concurrent_count]})") do |concurrent_count|            
    options[:concurrent_count] = concurrent_count
  end      

  options[:environment] = 'development'
  opts.on('-e', '--environment DECOUPLED', "decoupled environment can be used in the joinobs (default => #{options[:environment]})") do |environment|           
    options[:environment] = environment
  end

  options[:redis_host] = 'localhost'
  opts.on('-e', '--redis_host localhost', "redis host you want to connect to (default => #{options[:redis_host]})") do |redis_host|           
    options[:redis_host] = redis_host
  end  

  options[:amqp_host] = 'localhost'
  opts.on('-a', '--amqp_host localhost', "amqp server you want to connect to (default => #{options[:amqp_host]})") do |amqp_host|           
    options[:amqp_host]      = amqp_host.split(",").first
    options[:amqp_fallbacks] = Array.new
    first = false
    for fallback in amqp_host.split(",")
      unless first
         options[:amqp_fallbacks].push fallback
       else
        first = true
      end
    end
  end

  options[:collections] = ["schedules"]
  opts.on('-c', '--collections COLLECTION NAMES', "collections you want to add to (default => #{options[:collections]})") do |folders|           
    options[:collections] = folders.split(",")
  end

  opts.on('-o', '--config CONFIGFILE', "name of the config file you want to use (default => no config file). If config file is specified options will be added from there!") do |config_file|            
    options[:config_file] = config_file
  end

  opts.on('-h', '--help', 'Help messages') do     
    puts opts                     
    exit    
  end       
end

begin       
  optparse.parse!                 
  if options[:config_file].nil?             
    mandatory = [:collections, :amqp_host]
    missing = mandatory.select{ |param| options[param].nil? }        
    if not missing.empty?
      puts "Missing options: #{missing.join(', ')}"                  
      puts optparse      
      exit       
    end
  else
    # Loading Configfile is option parameter is set
    begin
      file_exists = true

      config_file = ""
      if options[:config_file].include? ".yml"
        config_file = options[:config_file]
      else
        config_file = options[:config_file]+".yml"
      end
      fn  = File.dirname(Dir.pwd) + "/config/#{config_file}"
      cnf = YAML::load(File.open(fn)) 

      puts "Loading parameters from config file..."
      puts ""
    rescue Exception => e 
      if e == "No such file or directory"
        puts "#{e} - Looking for option parameters instead."
        file_exists = false
      end 
    end
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument  
  puts $!.to_s         
  puts optparse        
  exit
end

# Loading parameters from config file
if file_exists
  loading_error = false
  errors        = Array.new

  #options[:concurrent_count] = cnf["concurrent_count"].nil? ? 3 : cnf["concurrent_count"]
  options[:environment]      = cnf["environment"].nil? ? "development" : cnf["environment"]
  options[:collections]      = cnf["collections"].nil? ? Array.new : cnf["collections"].split(",")
  options[:redis_host]       = cnf["redis_host"].nil? ? "" : cnf["redis_host"]
  options[:amqp_host]        = cnf["amqp_host"].nil? ? "localhost" : cnf["amqp_host"].split(",").first
  options[:amqp_fallbacks]   = Array.new
  first = false
  for fallback in cnf["amqp_host"].split(",")
    unless first
       options[:amqp_fallbacks].push fallback
     else
      first = true
    end
  end

  #if cnf["queue_name"].nil?
  #  errors.push "No queue specified"
  #  loading_error = true
  #else
  #  options[:queue_name] = cnf["queue_name"]
  #end
  
  #if cnf["job_klass"].nil?
  #  errors.push "No job class specified"
  #  loading_error = true
  #else
  #  options[:job_klass] = cnf["job_klass"]
  #end

  if loading_error
    puts "Exception while loading"
    for error in errors
      puts "- #{error}"
    end
    exit
  end
end

ENV['DECOUPLED'] = options[:environment]

for folder in options[:folders]
  $LOAD_PATH << File.join(Dir.pwd, folder)
end
require Decoupled::String.underscore(options[:job_klass])

begin
  options[:scheduler_name] = "#{`hostname`.chomp}-#{Process.pid}"
  $0 = "starting decoupled:scheduler #{options[:scheduler_name]} with environment #{options[:environment]}"

  puts '+---------------------------------------------------------------------------------------------'
  puts "| starting Decoupled Scheduler (#{options[:scheduler_name]}) with the following parameters:"
  puts "|"
  if options[:config_file]
    puts "| configfile:       #{config_file}"
    puts "|"
  end
  puts "| environment:      #{options[:environment]}"
  puts "| custom collections:   #{options[:collections].empty? ? "" : options[:collections].join(",")}"

  @scheduler = Decoupled::Scheduler.new(options)
  @scheduler.start

  $0 = "decoupled:scheduler subscribed to => #{options[:scheduler_name]} on RabbitmqServer: #{options[:amqp_host]} | #{options[:scheduler_name]} with Prefetch #{options[:concurrent_count]}"

  trap("TERM") { 
    puts 'shutting down scheduler, can take some time...'
    loop = false
    @scheduler.close_connections
    exit 2
  }

  trap("SIGINT") {
    puts 'shutting down scheduler, can take some time...'
    loop = false
    @scheduler.close_connections
    exit 2
  }

  trap("INT") { 
    puts 'shutting down scheduler, can take some time...'
    loop = false
    @scheduler.close_connections
    exit 2
  }
rescue => e
  puts "Error #{e}"
  puts "Closing all existing connections"
  @scheduler.close_connections
end